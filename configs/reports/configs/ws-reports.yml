---
ReportDefinitions:
- reportName: ReceiptRegisterSW
  decryptionPathId: MiscReceiptULB_v2
  summary: Receipt Register
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptno
    label: reports.ws.receiptno
    type: string
    source: ws
    total: false
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false 
  - name: receiptdate1
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: service
    label: reports.ws.serive
    type: string
    source: ws
    total: false
  - name: collectorname
    label: reports.ws.collectorname
    type: string
    source: ws
    total: false
  - name: transactiondate
    label: reports.ws.transactiondate
    type: string
    source: ws
    total: false
  - name: instrumentnumber
    label: reports.ws.instrumentnumber
    type: string
    source: ws
    total: false    
  - name: payername
    label: reports.ws.payername
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  - name: paymentstatus
    label: reports.ws.paymentstatus
    type: string
    source: ws
    total: false
  - name: ownername1
    label: reports.ws.ownername1
    type: string
    source: ws
    total: false   
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate <= $toDate
  - name: serviceType
    label: serviceType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $serviceType
  - name: receiptNumber
    label: receiptNumber
    type: string
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptnumber like $receiptNumber
  - name: paymentStatus
    label: paymentStatus
    type: singlevaluelist
    pattern: 'list://NEW:NEW,DEPOSITED:DEPOSITED'
    source: pt
    isMandatory: false
    searchClause: AND payment.paymentstatus like $paymentStatus
  - name: paymentMode
    label: paymentMode
    type: singlevaluelist
    pattern: 'list://CASH:CASH,CHEQUE:CHEQUE,DD:DD,ONLINE:ONLINE,CARD:CARD,OFFLINE_NEFT:OFFLINE NEFT'
    source: pt
    isMandatory: false
    searchClause: AND payment.paymentmode like $paymentMode
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select
      receiptnumber as receiptno,
      bill.consumercode as connectionno,     
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as receiptdate1,
      bill.businessservice as service,   
      paidby as payername,
      amountpaid,
      paymentmode,
      paymentstatus,
      instrumentnumber,
      to_char((To_timestamp(payment.instrumentdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS transactiondate, 
      usr.name as collectorname,
      payername as ownername1
    from egcl_paymentdetail pd
    inner join egcl_bill as bill on bill.id=pd.billid    
    inner join egcl_payment as payment on payment.id=pd.paymentid    
    inner join eg_user as usr on usr.id=payment.createdby::integer and payment.paymentstatus!='CANCELLED'
    where payment.tenantid=$tenantid and pd.businessservice in ('WS','SW') and bill.status='ACTIVE'
  orderby: order by pd.receiptdate desc


- reportName: ReceiptRegisterSW_OLD
  summary: Receipt Register
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: receiptdate
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: instrumenttype
    label: reports.ws.instrumenttype
    type: string
    source: ws
    total: false
  - name: bankname
    label: reports.ws.bankname
    type: string
    source: ws
    total: false
  - name: transactionnumber
    label: reports.ws.transactionnumber
    type: string
    source: ws
    total: false
  - name: transactiondate
    label: reports.ws.transactiondate
    type: string
    source: ws
    total: false
  - name: billperiod
    label: reports.ws.billperiod
    type: string
    source: ws
    total: false
  - name: amount
    label: reports.ws.amount
    type: string
    source: ws
    total: true
  - name: pendingamount
    label: reports.ws.pendingamount
    type: string
    source: ws
    total: true
  - name: usagetype
    label: reports.ws.usagetype
    type: string
    source: ws
    total: false
  - name: adhocpenalty
    label: reports.ws.adhocpenalty
    type: string
    source: ws
    total: true
  - name: adhocrebate
    label: reports.ws.adhocrebate
    type: string
    source: ws
    total: true
  - name: compositionfee
    label: reports.ws.compositionfee
    type: string
    source: ws
    total: true
  - name: connectionfee
    label: reports.ws.connectionfee
    type: string
    source: ws
    total: true
  - name: roundoff
    label: reports.ws.roundoff
    type: string
    source: ws
    total: true
  - name: formfee
    label: reports.ws.formfee
    type: string
    source: ws
    total: true
  - name: onetimefee
    label: reports.ws.onetimefee
    type: string
    source: ws
    total: true
  - name: othercharge
    label: reports.ws.othercharge
    type: string
    source: ws
    total: true
  - name: otherfee
    label: reports.ws.otherfee
    type: string
    source: ws
    total: true
  - name: roadcuttingcharge
    label: reports.ws.roadcuttingcharge
    type: string
    source: ws
    total: true
  - name: securityfee
    label: reports.ws.securityfee
    type: string
    source: ws
    total: true
  - name: securitycharge
    label: reports.ws.securitycharge
    type: string
    source: ws
    total: true
  - name: taxandcess
    label: reports.ws.interest
    type: string
    source: ws
    total: true
  - name: usercharge
    label: reports.ws.usercharge
    type: string
    source: ws
    total: true
  - name: g8issuedate
    label: reports.ws.g8issuedate
    type: string
    source: ws
    total: false
  - name: g8receiptno
    label: reports.ws.g8receiptno
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate <= $toDate
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $connectionType
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    WITH receipt_breakup AS 
    (
        SELECT
            pd.id as pdid,
            SUM(CASE WHEN taxheadcode LIKE 'SW_ADHOC_PENALTY' THEN adjustedamount ELSE 0 END) as adhocpenalty, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_ADHOC_REBATE' THEN adjustedamount ELSE 0 END) as adhocrebate, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_COMPOSITION_FEE' THEN adjustedamount ELSE 0 END) as compositionfee, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_CONNECTION_FEE' THEN adjustedamount ELSE 0 END) as connectionfee, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_FEE_ROUND_OFF' THEN adjustedamount ELSE 0 END) as roundoff, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_FORM_FEE' THEN adjustedamount ELSE 0 END) as formfee, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_ONE_TIME_FEE' THEN adjustedamount ELSE 0 END) as onetimefee,
            SUM(CASE WHEN taxheadcode LIKE 'SW_OTHER_CHARGE' THEN bad.amount ELSE 0 END) as othercharge,
            SUM(CASE WHEN taxheadcode LIKE 'SW_OTHER_FEE' THEN adjustedamount ELSE 0 END) as otherfee, 
            SUM(CASE WHEN taxheadcode LIKE 'SW_ROAD_CUTTING_CHARGE' THEN bad.amount ELSE 0 END) as roadcuttingcharge,
            SUM(CASE WHEN taxheadcode LIKE 'SW_SCRUTINY_FEE' THEN bad.amount ELSE 0 END)  as scrutinyfee,
            SUM(CASE WHEN taxheadcode LIKE 'SW_SECURITY_CHARGE' THEN adjustedamount ELSE 0 END) as securitycharge,
            SUM(CASE WHEN taxheadcode LIKE 'SW_TAX_AND_CESS' THEN adjustedamount ELSE 0 END) as taxandcess,
            SUM(CASE WHEN taxheadcode LIKE 'SW_USER_CHARGE' THEN adjustedamount ELSE 0 END) as usercharge				 
        FROM egcl_billaccountdetail as bad
        INNER JOIN egcl_billdetial as bd on bd.id = bad.billdetailid
        INNER JOIN egcl_paymentdetail as pd on pd.billid = bd.billid
        INNER JOIN egcl_payment as payment on pd.paymentid=payment.id
        WHERE payment.tenantid = $tenantid and payment.paymentstatus != 'CANCELLED' 
        group by pdid
    )
    SELECT
        --count(*)	
        pd.tenantid AS tenantid,
        pd.id,
        pt.propertyid as consumercode,
        to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY')  AS receiptdate,
        payment.ifsccode AS bankname, 
        receiptnumber,
        payment.totalamountpaid as amount, 
        payment.paymentmode as instrumenttype, 
        payment.transactionnumber,
        concat(to_char((To_timestamp(get_fromperiod(pd.billid)/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY'),'-', to_char((To_timestamp(get_toperiod(pd.billid)/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY')) as billperiod, 
        to_char((To_timestamp(payment.transactiondate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS transactiondate, 
        payment.totaldue - payment.totalamountpaid AS pendingamount,
        Initcap(case when pt.usagecategory like '%.%' then split_part(pt.usagecategory,'.',2) else pt.usagecategory end) as usagetype,
        (case when eg_user.name is null then '30048|21Fj+c3k2ldB0X3AzIh7atXB' else eg_user.name end)  as collectorname,
        receipt_breakup.*,
        to_char((To_timestamp(pd.manualreceiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS g8issuedate, 
        manualreceiptnumber as g8receiptno
      FROM egcl_paymentdetail pd Left outer join eg_user on eg_user.id = pd.createdby::INTEGER, egcl_payment payment, eg_pt_property as pt, receipt_breakup, egcl_bill bill, eg_sw_connection
      --(select string_agg(distinct propertyid,',') as propertyid, string_agg(distinct locality,',') as locality from eg_pt_address where tenantid=$tenantid group by propertyid ) pt_addr
      where pd.paymentid=payment.id and bill.id=pd.billid and payment.paymentstatus != 'CANCELLED' and pd.businessservice like $connectionType and payment.tenantid=$tenantid 
      and pt.id = eg_sw_connection.property_id 
      and receipt_breakup.pdid=pd.id  
      and pt.status!='INACTIVE' 
      --and pt_addr.propertyid=pt.id 
      --and pt.propertyid='PT-1012-978737'
      --and receiptnumber='PT/1012/2020-21/001021'
  orderby: ORDER BY pd.receiptdate DESC
  
  
- reportName: ReceiptRegisterReportSW
  decryptionPathId: ReceiptRegisterShort_V2
  summary: Receipt Register
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: service
    label: reports.ws.service
    type: string
    source: ws
    total: false
  - name: collectorname
    label: reports.ws.collectorname
    type: string
    source: ws
    total: false
  - name: online
    label: reports.ws.online
    type: string
    source: ws
    total: true
  - name: cash
    label: reports.ws.cash
    type: string
    source: ws
    total: true
  - name: cheque
    label: reports.ws.cheque
    type: string
    source: ws
    total: true
  - name: dd
    label: reports.ws.dd
    type: string
    source: ws
    total: true
  - name: cheque_dd_date
    label: reports.ws.cheque_dd_date
    type: string
    source: ws
    total: false
  - name: cheque_dd_transaction_number
    label: reports.ws.cheque_dd_transaction_number
    type: string
    source: ws
    total: false
  - name: card
    label: reports.ws.card
    type: string
    source: ws
    total: true
  - name: rtgs
    label: reports.ws.rtgs
    type: string
    source: ws
    total: true
  - name: neft
    label: reports.ws.neft
    type: string
    source: ws
    total: true
  - name: po
    label: reports.ws.po
    type: string
    source: ws
    total: true
  - name: paymentstatus
    label: reports.ws.paymentstatus
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate <= $toDate
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $connectionType
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select
      receiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as receiptdate1,
      businessservice as service,
      (case when eg_user.name is null then '30048|21Fj+c3k2ldB0X3AzIh7atXB' else eg_user.name end)  as collectorname,
      case when payment.paymentmode='ONLINE' then payment.totalamountpaid else 0 end as "online",
      case when payment.paymentmode='CASH' then payment.totalamountpaid else 0 end as cash,
      case when payment.paymentmode='CHEQUE' then payment.totalamountpaid else 0 end as cheque,
      case when payment.paymentmode='DD' then payment.totalamountpaid else 0 end as dd,
      to_char((To_timestamp(instrumentdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as cheque_dd_date,
      instrumentnumber as cheque_dd_transaction_number,
      case when payment.paymentmode='CARD' then payment.totalamountpaid else 0 end as card, 
      case when payment.paymentmode='OFFLINE_RTGS' then payment.totalamountpaid else 0 end as rtgs,
      case when payment.paymentmode='OFFLINE_NEFT' then payment.totalamountpaid else 0 end as neft,
      case when payment.paymentmode='POTAL_ORDER' then payment.totalamountpaid else 0 end as po
    from egcl_paymentdetail pd  Left outer join eg_user on eg_user.id = pd.createdby::INTEGER
    inner join egcl_payment payment on payment.id=pd.paymentid 
    where pd.tenantid=$tenantid
  orderby: order by pd.receiptdate
  
  
- reportName: BaseRegisterReportWS
  summary: Base Register Report WS
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: plotsize
    label: reports.ws.plotsize
    type: string
    source: ws
    total: false
  - name: applicationno
    label: reports.ws.applicationno
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: connectionholdertype
    label: reports.ws.connectionholdertype
    type: string
    source: ws
    total: false
  - name: applicationstatus
    label: reports.ws.applicationstatus
    type: string
    source: ws
    total: false
  - name: connectionholder
    label: reports.ws.connectionholder
    type: string
    source: ws
    total: false
  - name: name
    label: reports.ws.ownername
    type: string
    source: ws
    total: false
  - name: address
    label: reports.ws.address
    type: string
    source: ws
    total: false
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    with ptowner as
    (
        select split_part(string_agg(userid,','),',',1) as owneruserid,
        propertyid 
        from eg_pt_owner
        where tenantid=$tenantid and status='ACTIVE'
        group by propertyid
    )
    --,
    --    ptaddress as
    --(
    --    select 
    --    split_part(string_agg(locality,','),',',1) as locality,
    --    split_part(string_agg(concat(doorno,' ',plotno,' ',buildingname,' ',street,' ',city),'|'),'|',1) as address,
    --    propertyid 
    --    from eg_pt_address
    --    where tenantid=$tenantid
    --    group by propertyid
    --)
       select 
         connectionno, 
         pt.landarea as plotsize,
         oldconnectionno,
         applicationno,
         pt.propertyid,
         ch.connectionholdertype,
         wsconnection.applicationstatus,
         users.name as connectionHolder,
         userowner.name as name
         --concat(address,' ',localityname) as address
       from eg_ws_connection wsconnection
       inner join eg_pt_property as pt on pt.id=wsconnection.property_id
       left outer join eg_ws_connectionholder as ch on ch.connectionid=wsconnection.id
       left outer join eg_user as users on ch.userid=users.uuid
       inner join ptowner on  ptowner.propertyid=pt.id
       left outer join eg_user as userowner on ptowner.owneruserid=userowner.uuid
       --inner join ptaddress on ptaddress.propertyid=pt.id
       --INNER JOIN eg_bndry_mohalla on eg_bndry_mohalla.localitycode=ptaddress.locality
      
- reportName: FieldCollectionSearchReportWS
  decryptionPathId: FieldCollectionSearchReportWS
  summary: Field Collection Search Report WS
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate1
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: paymentstatus
    label: reports.ws.paymentstatus
    type: string
    source: ws
    total: false
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  - name: name
    label: reports.ws.name
    type: string
    source: ws
    total: false
  - name: mobilenumber
    label: reports.ws.mobilenumber
    type: string
    source: ws
    total: false
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate <= $toDate
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select 
      receiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS  receiptdate1,
      pd.businessservice,
      pd.amountpaid,
      consumercode,
      paymentstatus,
      paymentmode,
      usr.name as name,
      usr.mobilenumber as mobilenumber
    from egcl_paymentdetail pd
    inner join egcl_bill as bill on bill.id=pd.billid
    INNER join egcl_payment as payment on payment.id=pd.paymentid
    inner join eg_user as usr on usr.id=payment.createdby::integer
    where pd.tenantid=$tenantid
  orderby: ORDER BY pd.receiptdate DESC

- reportName: FieldCollectionSearchReceiptWS
  summary: Field Collection Search Receipt WS
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate1
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: manualreceiptnumber
    label: reports.ws.manualreceiptnumber
    type: string
    source: ws
    total: false
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: paymentstatus
    label: reports.ws.paymentstatus
    type: string
    source: ws
    total: false
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  - name: billnumber
    label: reports.ws.billnumber
    type: string
    source: ws
    total: false
  - name: billdescription
    label: reports.ws.billdescription
    type: string
    source: ws
    total: false
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND bill.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate <= $toDate
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select 
      receiptnumber,
      manualreceiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS  receiptdate1,
      pd.businessservice as businessservice,
      billnumber, 
      billdescription, 
      consumercode, 
      pd.amountpaid as amountpaid,
      paymentmode, 
      paymentstatus
    from egcl_paymentdetail pd
    inner join egcl_bill as bill on bill.id=pd.billid
    inner join egcl_billdetial as billd on billd.billid=pd.billid
    INNER join egcl_payment as payment on payment.id=pd.paymentid
    where 1=1
  orderby: ORDER BY pd.receiptdate DESC
  
  
- reportName: ChequeCollectionReportWS
  summary: Cheque Collection Report WS
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: oldconnectionno
    label: reports.ws.oldconnectionno
    type: string
    source: ws
    total: false
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate1
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: manualreceiptnumber
    label: reports.ws.manualreceiptnumber
    type: string
    source: ws
    total: false
  - name: manualreceiptdate
    label: reports.ws.manualreceiptdate
    type: string
    source: ws
    total: false
  - name: cheque_dd_no
    label: reports.ws.cheque_dd_no
    type: string
    source: ws
    total: false
  - name: cheque_dd_date
    label: reports.ws.cheque_dd_date
    type: string
    source: ws
    total: false
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  - name: paymentstatus
    label: reports.ws.paymentstatus
    type: string
    source: ws
    total: false
  - name: bank_name
    label: reports.ws.bank_name
    type: string
    source: ws
    total: false
  - name: branch
    label: reports.ws.branch
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND bill.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate <= $toDate
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select
      consumercode,
      wsconnection.connectionno,
      wsconnection.oldconnectionno,
      receiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as receiptdate1,
      manualreceiptnumber,
      to_char((To_timestamp(pd.manualreceiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as manualreceiptdate,
      transactionnumber as cheque_dd_no,
      to_char((To_timestamp(transactiondate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as cheque_dd_date,
      paymentmode,
      paymentstatus,
      bank_name,
      branch,
      pd.amountpaid,
      pd.businessservice
    from egcl_paymentdetail pd
    inner join egcl_payment payment on payment.id=pd.paymentid
    left outer join bank_branches on bank_branches.ifsc=payment.ifsccode
    inner join egcl_bill bill on bill.id=pd.billid
    inner join eg_ws_connection wsconnection on wsconnection.connectionno=bill.consumercode
    where payment.paymentmode='CHEQUE' and pd.tenantid=$tenantid and payment.paymentstatus!='CANCELLED'
  orderby: ORDER BY pd.receiptdate DESC
  
- reportName: SearchOnlineReceiptsWS
  decryptionPathId: ReceiptRegisterShort_V2
  summary: Search Online Receipts WS
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: billnumber
    label: reports.ws.billnumber
    type: string
    source: ws
    total: false
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate1
    label: reports.ws.receiptdate1
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: transactionnumber
    label: reports.ws.transactionnumber
    type: string
    source: ws
    total: false
  - name: transactiondate1
    label: reports.ws.transactiondate
    type: string
    source: ws
    total: false
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  - name: paymentstatus
    label: reports.ws.paymentstatus
    type: string
    source: ws
    total: false
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  - name: collectorname
    label: reports.ws.collectorname
    type: string
    source: ws
    total: false
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND bill.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND payment.transactiondate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND payment.transactiondate <= $toDate
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select 
      billnumber,
      bill.consumercode as consumercode,
      pd.receiptnumber as receiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as receiptate1,
      pd.amountpaid,
      pd.businessservice ,
      paymentstatus , 
      payment.transactionnumber ,
      to_char((To_timestamp(payment.transactiondate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as transactiondate1,
      paymentmode,
      (case when eg_user.name is null then '30048|23/xn3x2FAxn8vYAN0IdplsOxaE=' else eg_user.name end)  as collectorname
    from egcl_paymentdetail pd Left outer join eg_user on eg_user.id = pd.createdby::INTEGER
    inner join egcl_bill as bill on bill.id=pd.billid
    INNER join egcl_payment as payment on payment.id=pd.paymentid
    where paymentmode='ONLINE' and pd.businessservice in ('WS','SW') and payment.tenantid=$tenantid
  orderby: ORDER BY payment.transactiondate DESC
  
- reportName: ReceiptCollections
  summary: Receipt Collections
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate1
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  - name: billnumber
    label: reports.ws.billnumber
    type: string
    source: ws
    total: false
  - name: paidby
    label: reports.ws.paidby
    type: string
    source: ws
    total: false
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate <= $toDate
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select 
      consumercode,
      receiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as receiptdate1,
      amountpaid,
      paymentmode,
      pd.businessservice,
      bill.billnumber,
      payment.paidby
    from egcl_paymentdetail pd
    inner join egcl_bill as bill on bill.id=pd.billid
    inner join egcl_payment as payment on payment.id=pd.paymentid and payment.paymentstatus!='CANCELLED'
    and pd.businessservice in ('WS','SW','WS.ONE_TIME_FEE','SW.ONE_TIME_FEE') 
    where  pd.tenantid=$tenantid
  orderby: ORDER BY pd.receiptdate DESC
  
- reportName: JE_PendencyReport
  decryptionPathId: JE_PendencyReport_WS
  summary: JE_Pendency Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: name
    label: reports.ws.name
    type: string
    source: ws
    total: false
  - name: count
    label: reports.ws.count
    type: string
    source: ws
    total: true
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select usr.name,count(*) 
    from eg_ws_connection con
    inner join eg_user as usr on usr.uuid=con.createdby and usr.type='EMPLOYEE'
    where applicationstatus not in ('INITIATED') and con.tenantid=$tenantid
  groupby: GROUP BY con.createdby,usr.name
  
- reportName: CashCollectionReport
  decryptionPathId: ReceiptRegisterShort_V2
  summary: Cash Collection Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: receiptdate1
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: collectorname
    label: reports.ws.collectorname
    type: string
    source: ws
    total: false
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate <= $toDate
  - name: collectorname
    label: reports.pt.collectorname
    type: singlevaluelist
    pattern: http://egov-hrms:8080/egov-hrms/employees/_search?tenantId=$tenantid&roles=WS_CEMP,WS_CLERK,SW_CEMP,SW_CLERK|$.Employees[*].user.id|$.Employees[*].user.name
    source: ws
    wrapper: true
    isMandatory: false
    searchClause: AND eg_user.id = $collectorname::INTEGER
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    select 
      consumercode,
      receiptnumber,
      to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as receiptdate1,
      amountpaid,
      (case when eg_user.name is null then '30048|23/xn3x2FAxn8vYAN0IdplsOxaE=' else eg_user.name end)  as collectorname
    from egcl_paymentdetail pd Left outer join eg_user on eg_user.id = pd.createdby::INTEGER
    inner join egcl_bill as bill on bill.id=pd.billid
    inner join egcl_payment as payment on payment.id=pd.paymentid and payment.paymentmode='CASH' and payment.paymentstatus!='CANCELLED'
    and pd.businessservice in ('WS','SW','WS.ONE_TIME_FEE','SW.ONE_TIME_FEE') where payment.tenantid=$tenantid
  orderby: ORDER BY pd.receiptdate DESC
  
- reportName: CollectionsSummaryHeadwiseReport
  summary: Collections Summary Headwise Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: taxheadcode
    label: reports.ws.taxheadcode
    type: string
    source: ws
    total: false
  - name: totalamountpaid
    label: reports.ws.totalamountpaid
    type: string
    source: ws
    total: true
  - name: totalassessments
    label: reports.ws.totalassessments
    type: string
    source: ws
    total: true
  - name: totalonline
    label: reports.ws.totalonline
    type: string
    source: ws
    total: true
  - name: countonline
    label: reports.ws.countonline
    type: string
    source: ws
    total: true
  - name: totalcash
    label: reports.ws.totalcash
    type: string
    source: ws
    total: true
  - name: countcash
    label: reports.ws.countcash
    type: string
    source: ws
    total: true
  - name: totalcheque
    label: reports.ws.totalcheque
    type: string
    source: ws
    total: true
  - name: totaldd
    label: reports.ws.totaldd
    type: string
    source: ws
    total: true
  - name: countdd
    label: reports.ws.countdd
    type: string
    source: ws
    total: true
  - name: totalcard
    label: reports.ws.totalcard
    type: string
    source: ws
    total: true
  - name: countcard
    label: reports.ws.countcard
    type: string
    source: ws
    total: true
  - name: totalrtgs
    label: reports.ws.totalrtgs
    type: string
    source: ws
    total: true
  - name: totalneft
    label: reports.ws.totalneft
    type: string
    source: ws
    total: true
  - name: countneft
    label: reports.ws.countneft
    type: string
    source: ws
    total: true
  - name: totalPO
    label: reports.ws.totalPO
    type: string
    source: ws
    total: true
  - name: countPO
    label: reports.ws.countPO
    type: string
    source: ws
    total: true
  - name: countoffline
    label: reports.ws.countoffline
    type: string
    source: ws
    total: true
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $connectionType
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: false
    searchClause: AND pd.receiptdate <= $toDate
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    SELECT 
        taxheadcode,		
        sum(payment.totalamountpaid) as totalamountpaid,
        count(payment.totalamountpaid) as totalassessments,
        sum(case when payment.paymentmode='ONLINE' then payment.totalamountpaid else 0 end) as "totalonline",
        sum(case when payment.paymentmode='ONLINE' then 1 else 0 end) as "countonline",
        sum(case when payment.paymentmode='CASH' then payment.totalamountpaid else 0 end) as totalcash,
        sum(case when payment.paymentmode='CASH' then 1 else 0 end) as countcash,
        sum(case when payment.paymentmode='CHEQUE' then payment.totalamountpaid else 0 end) as totalcheque,
        sum(case when payment.paymentmode='CHEQUE' then 1 else 0 end) as countcheque,
        sum(case when payment.paymentmode='DD' then payment.totalamountpaid else 0 end) as totalDD,
        sum(case when payment.paymentmode='DD' then 1 else 0 end) as countDD,
        sum(case when payment.paymentmode='CARD' then payment.totalamountpaid else 0 end) as totalcard, 
        sum(case when payment.paymentmode='CARD' then 1 else 0 end) as countcard, 
        sum(case when payment.paymentmode='OFFLINE_RTGS' then payment.totalamountpaid else 0 end) as totalRTGS,
        sum(case when payment.paymentmode='OFFLINE_RTGS' then 1 else 0 end) as countRTGS,
        sum(case when payment.paymentmode='OFFLINE_NEFT' then payment.totalamountpaid else 0 end) as totalNEFT,
        sum(case when payment.paymentmode='OFFLINE_NEFT' then 1 else 0 end) as countNEFT,
        sum(case when payment.paymentmode='POTAL_ORDER' then payment.totalamountpaid else 0 end) as "totalPO",
        sum(case when payment.paymentmode='POTAL_ORDER' then 1 else 0 end) as "countPO",
        sum(case when payment.paymentmode!='ONLINE' then 1 else 0 end) as "countoffline"
      FROM egcl_paymentdetail pd
      INNER join egcl_payment as payment on pd.paymentid=payment.id
      INNER JOIN egcl_billdetial as bd on pd.billid = bd.billid
      INNER JOIN egcl_billaccountdetail as bad on bad.billdetailid = bd.id
      where  payment.paymentstatus != 'CANCELLED' and payment.tenantid=$tenantid
  groupby: GROUP BY taxheadcode
  
  
- reportName: ArrearReport
  summary: Arrear Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: totalamount
    label: reports.ws.totalamount
    type: string
    source: ws
    total: true
  - name: amountpaid
    label: reports.ws.amountpaid
    type: string
    source: ws
    total: true
  - name: dueamount
    label: reports.ws.dueamount
    type: string
    source: ws
    total: true
  searchParams:
  - name: connectionType
    label: connectionType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND businessservice like $connectionType
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    with demands as
    (
      select demandid,sum(taxamount) as amount,sum(collectionamount) as collection,sum(taxamount-collectionamount) as arrear 
      from egbs_demanddetail_v1 where tenantid=$tenantid
      group by demandid
      having sum(taxamount-collectionamount)>0
    )
    select consumercode,sum(amount) as totalamount,sum(collection) as amountpaid,sum(arrear) as dueamount 
    from egbs_demand_v1 d 
    inner join demands on demands.demandid=d.id  and status='ACTIVE'
    where tenantid=$tenantid
  groupby: group by consumercode


- reportName: SearchWaterChargeReport
  summary: Search Water Charge Notice Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: oldconnectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false  
  - name: ownername
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: connectiontype
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: billnumber
    label: reports.ws.billno
    type: string
    source: ws
    total: false
  - name: fromdate
    label: reports.ws.fromdate
    type: string
    source: ws
    total: false
  - name: todate
    label: reports.ws.todate
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.ws.fromBillDate
    type: epoch
    source: ws
    isMandatory: false
    searchClause: AND bill.billdate >= $fromDate
  - name: toDate
    label: reports.ws.toBillDate
    type: epoch
    source: ws
    isMandatory: false
    searchClause: AND bill.billdate <= $toDate
  - name: mobilenumber
    label: reports.ws.mobilenumber
    type: string
    source: ws
    isMandatory: false
    searchClause: AND owners.mobilenumber=$mobilenumber
  - name: connectionNumber
    label: reports.ws.connectionNumber
    type: string
    source: ws
    isMandatory: false
    searchClause: AND connectionno=$connectionNumber
  - name: oldConnectionNumber
    label: reports.ws.oldConnectionNumber
    type: string
    source: ws
    isMandatory: false
    searchClause: AND oldconnectionno=$oldConnectionNumber
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    with owners as
      (
        select 
          split_part(string_agg(name,','),',',1) as ownername,
          split_part(string_agg(mobilenumber,','),',',1) as mobilenumber,
          pt.propertyid as propertyid
        from eg_user usr
        inner join eg_pt_owner on eg_pt_owner.userid=usr.uuid
        inner join eg_pt_property pt on eg_pt_owner.propertyid=pt.id and pt.status='ACTIVE'
        where pt.tenantid=$tenantid
        group by pt.propertyid
      )
    select 
      connectionno,
      oldconnectionno,
      pt.propertyid,
      ownername,
      connectiontype,
      bill.billnumber,
      to_char((To_timestamp(bill.billdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as billdate,
      to_char((To_timestamp(bd.fromperiod/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') fromperiod,
      to_char((To_timestamp(bd.toperiod/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') toperiod,
      bill.totalamount,
      bill.businessservice
    from eg_ws_connection wsconnection
    inner join eg_pt_property pt on pt.id=wsconnection.property_id and pt.status='ACTIVE'
    inner join eg_ws_service on eg_ws_service.connection_id=wsconnection.id
    inner join egcl_bill bill on bill.consumercode=wsconnection.connectionno 
    inner join egcl_billdetial bd on bill.id=bd.billid
    inner join owners on owners.propertyid=pt.propertyid
    where wsconnection.tenantid=$tenantid and wsconnection.status='Active' and bill.businessservice like 'WS%'
  orderby: order by bill.billdate desc


- reportName: SearchSewerageChargeReport
  summary: Search Sewerage Charge Notice Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: oldconnectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false  
  - name: ownername
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: billnumber
    label: reports.ws.billno
    type: string
    source: ws
    total: false
  - name: fromdate
    label: reports.ws.fromdate
    type: string
    source: ws
    total: false
  - name: todate
    label: reports.ws.todate
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.ws.fromBillDate
    type: epoch
    source: ws
    isMandatory: false
    searchClause: AND bill.billdate >= $fromDate
  - name: toDate
    label: reports.ws.toBillDate
    type: epoch
    source: ws
    isMandatory: false
    searchClause: AND bill.billdate <= $toDate
  - name: mobilenumber
    label: reports.ws.mobilenumber
    type: string
    source: ws
    isMandatory: false
    searchClause: AND owners.mobilenumber=$mobilenumber
  - name: connectionNumber
    label: reports.ws.connectionNumber
    type: string
    source: ws
    isMandatory: false
    searchClause: AND connectionno=$connectionNumber
  - name: oldConnectionNumber
    label: reports.ws.oldConnectionNumber
    type: string
    source: ws
    isMandatory: false
    searchClause: AND oldconnectionno=$oldConnectionNumber
  query: |
    -- Use CTE to force query plan, compute & use CTE later
    with owners as
      (
        select 
          split_part(string_agg(name,','),',',1) as ownername,
          pt.propertyid as propertyid
        from eg_user usr
        inner join eg_pt_owner on eg_pt_owner.userid=usr.uuid
        inner join eg_pt_property pt on eg_pt_owner.propertyid=pt.id and pt.status='ACTIVE'
        where pt.tenantid=$tenantid
        group by pt.propertyid
      )
      select 
        connectionno,
        oldconnectionno,
        pt.propertyid,
        ownername,
        bill.billnumber,
        to_char((To_timestamp(bill.billdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') as billdate,
        to_char((To_timestamp(bd.fromperiod/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') fromperiod,
        to_char((To_timestamp(bd.toperiod/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') toperiod,
        bill.totalamount,
        bill.businessservice
        from eg_sw_connection swconnection
        inner join eg_pt_property pt on pt.id=swconnection.property_id and pt.status='ACTIVE'
        inner join egcl_bill bill on bill.consumercode=swconnection.connectionno 
        inner join egcl_billdetial bd on bill.id=bd.billid
        inner join owners on owners.propertyid=pt.propertyid
        where swconnection.tenantid=$tenantid and swconnection.status='Active' and bill.businessservice like 'SW%'
  orderby: order by bill.billdate desc
  
- reportName: estimation_charge
  summary: estimation charge
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: "A1"
  sourceColumns:
  - name: receiptnumber
    label: reports.ws.receiptnumber
    type: string
    source: ws
    total: false
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false       
  - name: Advance
    label: reports.ws.Advance
    type: string
    source: ws
    total: false   
  - name: receiptdate
    label: reports.ws.receiptdate
    type: string
    source: ws
    total: false
  - name: instrumenttype
    label: reports.ws.instrumenttype
    type: string
    source: ws
    total: false
  - name: Water_Charge
    label: reports.ws.Water_Charge
    type: string
    source: ws
    total: true
  - name: Composition_Fee
    label: reports.ws.Composition_Fee
    type: string
    source: ws
    total: true
  - name: Connection_Fee
    label: reports.ws.Connection_Fee
    type: string
    source: ws
    total: true
  - name: Fee_Round_off
    label: reports.ws.Fee_Round_off
    type: string
    source: ws
    total: true
  - name: Other_Fee
    label: reports.ws.Other_Fee
    type: string
    source: ws
    total: true
  - name: Road_Cutting_Charge
    label: reports.ws.Road_Cutting_Charge
    type: string
    source: ws
    total: true
  - name: water_round_off
    label: reports.ws.water_round_off
    type: string
    source: ws
    total: true
  - name: secuirty_dep
    label: reports.ws.secuirty_dep
    type: string
    source: ws
    total: true
  - name: supervision_charge
    label: reports.ws.supervision_charge
    type: string
    source: ws
    total: true
  - name: tax_adjustment
    label: reports.ws.tax_adjustment
    type: string
    source: ws
    total: false
  - name: WS_time_interest
    label: reports.ws.WS_time_interest
    type: string
    source: ws
    total: false
  - name: Ws_time_penalty
    label: reports.ws.Ws_time_penalty
    type: string
    source: ws
    total: false
  - name: User_Charge
    label: reports.ws.User_Charge
    type: string
    source: ws
    total: false
  - name: paidby
    label: reports.ws.paidby
    type: string
    source: ws
    total: false
  - name: amount
    label: reports.ws.amount
    type: string
    source: ws
    total: true
  - name: transactionnumber
    label: reports.ws.transactionnumber
    type: string
    source: ws
    total: false
  - name: financialyear
    label: reports.ws.financialyear
    type: string
    source: ws
    total: false
  - name: g8receiptno
    label: reports.ws.g8receiptno
    type: string
    source: ws
    total: false   
  - name: pendingamount
    label: reports.ws.pendingamount
    type: string
    source: ws
    total: false 
  - name: tenantid
    label: reports.ws.tenantid
    type: string
    source: ws
    total: false    
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate >= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND pd.receiptdate <= $toDate
  - name: serviceType
    label: serviceType
    type: singlevaluelist
    pattern: 'list://WS%:Water,SW%:Sewerage'
    source: pt
    isMandatory: true
    searchClause: AND pd.businessservice like $serviceType  
  query: |
    -- Use CTE to force query plan, compute & use CTE later
     WITH receipt_breakup AS (
                      SELECT
                        pd.id as pdid,
                     SUM(CASE WHEN taxheadcode LIKE 'WS_ADVANCE_CARRYFORWARD' THEN adjustedamount ELSE 0 END) as Advance, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_CHARGE' THEN adjustedamount ELSE 0 END) as Water_Charge, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_COMPOSITION_FEE' THEN adjustedamount ELSE 0 END) as Composition_Fee, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_CONNECTION_FEE' THEN adjustedamount ELSE 0 END) as Connection_Fee, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_FEE_ROUND_OFF' THEN adjustedamount ELSE 0 END) as Fee_Round_off , 
          SUM(CASE WHEN taxheadcode LIKE 'WS_OTHER_FEE' THEN adjustedamount ELSE 0 END) as Other_Fee, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_ROAD_CUTTING_CHARGE' THEN adjustedamount ELSE 0 END) as Road_Cutting_Charge, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_Round_Off' THEN adjustedamount ELSE 0 END) as water_round_off, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_SECURITY_DEPOSIT' THEN adjustedamount ELSE 0 END) as secuirty_dep, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_SUPERVISION_CHARGE' THEN adjustedamount ELSE 0 END) as supervision_charge, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_TAX_ADJUSTMENT' THEN adjustedamount ELSE 0 END) as tax_adjustment, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_TIME_INTEREST' THEN adjustedamount ELSE 0 END) as WS_time_interest, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_TIME_PENALTY' THEN adjustedamount ELSE 0 END) as Ws_time_penalty, 
          SUM(CASE WHEN taxheadcode LIKE 'WS_USER_CHARGE' THEN adjustedamount ELSE 0 END) as User_Charge 
    
                      FROM egcl_billaccountdetail as bad
                      INNER JOIN egcl_billdetial as bd on bd.id = bad.billdetailid
                      INNER JOIN egcl_paymentdetail as pd on pd.billid = bd.billid
                      INNER JOIN egcl_payment as payment on pd.paymentid=payment.id
                      WHERE payment.tenantid =  $tenantid and payment.paymentstatus != 'CANCELLED' and  pd.businessservice='WS.ONE_TIME_FEE'
                      AND pd.receiptdate >= $fromDate AND pd.receiptdate <= $toDate
                      GROUP BY pdid
          )
    
          SELECT 
          --  pd.id,
            pt.applicationno as consumercode,
            to_char((To_timestamp(pd.receiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY')  AS receiptdate,
            --payment.ifsccode AS bankname,
            --concat(bank_branches.bank_name,' ',bank_branches.branch) as bankname,
            receiptnumber,
            payment.totalamountpaid as amount, 
            payment.paymentmode as instrumenttype, 
            payment.transactionnumber,
            concat(to_char((To_timestamp(get_fromperiod(pd.billid)/1000) at time Zone 'Asia/Kolkata'),'YYYY'),'-', to_char((To_timestamp(get_toperiod(pd.billid)/1000) at time Zone 'Asia/Kolkata'),'YY')) as financialyear, 
            to_char((To_timestamp(payment.instrumentdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS transactiondate, 
            payment.totaldue - payment.totalamountpaid AS pendingamount,
            --Initcap(case when pt.usagecategory like '%.%' then split_part(pt.usagecategory,'.',2) else pt.usagecategory end) as usagetype,
            (case when eg_user.name is null then '30048|21Fj+c3k2ldB0X3AzIh7atXB' else eg_user.name end)  as collectorname,
            receipt_breakup.*,
            to_char((To_timestamp(pd.manualreceiptdate/1000) at time Zone 'Asia/Kolkata'),'DD-MM-YYYY') AS g8issuedate, 
            manualreceiptnumber as g8receiptno
          FROM egcl_paymentdetail pd Left outer join eg_user on eg_user.id = pd.createdby::INTEGER, egcl_payment payment left outer join bank_branches on bank_branches.ifsc=payment.ifsccode, 
    
          (select * from (select *,(row_number() over(partition by applicationno order by lastmodifiedtime desc)) as rw from eg_ws_connection  where tenantid=$tenantid) pts where rw=1) as pt,
    
          receipt_breakup, egcl_bill bill
    
          where pd.paymentid=payment.id and bill.id=pd.billid and payment.paymentstatus != 'CANCELLED' and pd.businessservice='WS.ONE_TIME_FEE' and payment.tenantid=$tenantid
    
          and pt.applicationno = bill.consumercode and receipt_breakup.pdid=pd.id 
          
- reportName: usageWiseReport
  summary: Usage Wise Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: no_of_applications
    label: reports.ws.no_of_applications
    type: string
    source: ws
    total: true
  - name: category
    label: reports.ws.category
    type: string
    source: ws
    total: false
  - name: water_status
    label: reports.ws.water_status
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND ws.createdtime>= $fromDate
  - name: toDate
    label: reports.pt.toDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: AND ws.createdtime<= $toDate
  query: |
    SELECT 
    COUNT(*) AS no_of_applications, 
    pt.usagecategory AS category,
    ws.status AS water_status  
    FROM 
       eg_ws_connection ws
    JOIN 
       eg_pt_property pt ON ws.property_id = pt.propertyid
    WHERE 
    ws.property_id=pt.propertyid
    and ws.createdtime>=$fromDate
    and ws.createdtime<=$toDate
    and ws.tenantid=$tenantid
  groupby:  group by pt.usagecategory, ws.status
  
- reportName: GeneratedDemandReport
  summary: Water Demand Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: quarter
    label: reports.ws.quarter
    type: string
    source: ws
    total: false
  - name: distinct_consumercode_count
    label: reports.ws.distinct_consumercode_count
    type: string
    source: ws
    total: true
  - name: UsageType
    label: reports.ws.UsageType
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: and 1=1
  query: |
    WITH quarterly_data AS (
    SELECT
        EXTRACT(YEAR FROM to_timestamp(d1.taxperiodfrom / 1000)) AS year,
        CASE
            WHEN EXTRACT(MONTH FROM to_timestamp(d1.taxperiodfrom / 1000)) BETWEEN 4 AND 6 THEN 'Quarter 1'
            WHEN EXTRACT(MONTH FROM to_timestamp(d1.taxperiodfrom / 1000)) BETWEEN 7 AND 9 THEN 'Quarter 2'
            WHEN EXTRACT(MONTH FROM to_timestamp(d1.taxperiodfrom / 1000)) BETWEEN 10 AND 12 THEN 'Quarter 3'
            ELSE 'Quarter 4'
        END AS quarter,
        COUNT(DISTINCT d1.consumercode) AS distinct_consumercode_count,
        d5.usagecategory AS UsageType
    FROM
        egbs_demand_v1 d1
    LEFT JOIN eg_ws_connection d4 ON d4.connectionno = d1.consumercode
    LEFT JOIN eg_ws_service ser ON d4.id = ser.connection_id
    LEFT JOIN eg_pt_property d5 ON d4.property_id = d5.propertyid
    WHERE d1.taxperiodfrom >= $fromDate
    AND d1.tenantid = $tenantid
      AND d1.status != 'CANCELLED'
      AND d1.businessservice = 'WS' and ser.connectiontype!='Metered'
      AND d5.usagecategory IS NOT NULL
    GROUP BY
        year, quarter, ser.connectiontype, d5.usagecategory
    )

    SELECT
        year || '->' || quarter AS quarter,
        COALESCE(CAST(distinct_consumercode_count AS TEXT), '0') AS distinct_consumercode_count,
        UsageType
    FROM
        quarterly_data
     where 1=1
    
- reportName: GeneratSWDemandReport
  summary: Sewerage Demand Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: quarter
    label: reports.ws.quarter
    type: string
    source: ws
    total: false
  - name: distinct_consumercode_count
    label: reports.ws.distinct_consumercode_count
    type: string
    source: ws
    total: true
  - name: UsageType
    label: reports.ws.UsageType
    type: string
    source: ws
    total: false
  searchParams:
  - name: fromDate
    label: reports.pt.fromDate
    type: epoch
    source: pt
    isMandatory: true
    searchClause: and 1=1
  query: |
    WITH quarterly_data AS (
    SELECT
        EXTRACT(YEAR FROM to_timestamp(d1.taxperiodfrom / 1000)) AS year,
        CASE
            WHEN EXTRACT(MONTH FROM to_timestamp(d1.taxperiodfrom / 1000)) BETWEEN 4 AND 6 THEN 'Quarter 1'
            WHEN EXTRACT(MONTH FROM to_timestamp(d1.taxperiodfrom / 1000)) BETWEEN 7 AND 9 THEN 'Quarter 2'
            WHEN EXTRACT(MONTH FROM to_timestamp(d1.taxperiodfrom / 1000)) BETWEEN 10 AND 12 THEN 'Quarter 3'
            ELSE 'Quarter 4'
        END AS quarter,
        COUNT(DISTINCT d1.consumercode) AS distinct_consumercode_count,
        d5.usagecategory AS UsageType
    FROM
        egbs_demand_v1 d1
    LEFT JOIN eg_sw_connection d4 ON d4.connectionno = d1.consumercode
    LEFT JOIN eg_sw_service ser ON d4.id = ser.connection_id
    LEFT JOIN eg_pt_property d5 ON d4.property_id = d5.propertyid
    WHERE d1.taxperiodfrom >= $fromDate
    AND d1.tenantid = $tenantid
      AND d1.status != 'CANCELLED'
      AND d1.businessservice = 'SW' and ser.connectiontype!='Metered'
      AND d5.usagecategory IS NOT NULL
    GROUP BY
        year, quarter, ser.connectiontype, d5.usagecategory
    )

    SELECT
        year || '->' || quarter AS quarter,
        COALESCE(CAST(distinct_consumercode_count AS TEXT), '0') AS distinct_consumercode_count,
        UsageType
    FROM
        quarterly_data
     where 1=1     

- reportName: Connectioncountreport
  summary: Connection Count  Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: totalwaterconnections
    label: reports.ws.totalwaterconnections
    type: string
    source: ws
    total: true
  - name: totalsewerageconnections
    label: reports.ws.totalsewerageconnections
    type: string
    source: ws
    total: true
  - name: totalwateractive
    label: reports.ws.totalwateractive
    type: string
    source: ws
    total: true
  - name: totalsewerageactive
    label: reports.ws.totalsewerageactive
    type: string
    source: ws
    total: true
  - name: bothactiveconnection
    label: reports.ws.bothactiveconnection
    type: string
    source: ws
    total: true
  - name: totalactiveresidentialinwater
    label: reports.ws.totalactiveresidentialinwater
    type: string
    source: ws
    total: true
  - name: totalactiveresidentialinsewerage
    label: reports.ws.totalactiveresidentialinsewerage
    type: string
    source: ws
    total: true
  - name: totalactivenonresidentialinsewerage
    label: reports.ws.totalactivenonresidentialinsewerage
    type: string
    source: ws
    total: true
  - name: totalactivenonresidentialinwater
    label: reports.ws.totalactivenonresidentialinwater
    type: string
    source: ws
    total: true
  - name: totalmeteredconnections
    label: reports.ws.totalmeteredconnections
    type: string
    source: ws
    total: true
  - name: Total_Exempted_in_Water
    label: reports.ws.Total_Exempted_in_Water
    type: string
    source: ws
    total: true
  - name: totalexemptedinwater
    label: reports.ws.totalexemptedinwater
    type: string
    source: ws
    total: true
  - name: betweenfivemarlawater
    label: reports.ws.betweenfivemarlawater
    type: string
    source: ws
    total: true
  - name: betweenfivemarlasewerage
    label: reports.ws.betweenfivemarlasewerage
    type: string
    source: ws
    total: true
  - name: betweensixmarlawater
    label: reports.ws.betweensixmarlawater
    type: string
    source: ws
    total: true
  - name: betweensixandtenmarlasewerage
    label: reports.ws.betweensixandtenmarlasewerage
    type: string
    source: ws
    total: true
  - name: morethantenmarlawater
    label: reports.ws.morethantenmarlawater
    type: string
    source: ws
    total: true
  - name: morethantenmarlasewerage
    label: reports.ws.morethantenmarlasewerage
    type: string
    source: ws
    total: true   
  query: |
    WITH connection_data AS (
    SELECT
        ws.connectionno,
        ws.property_id,
        ws.status AS water_status,
        sw.status AS sewerage_status,
        ws.tenantid,
        prop.usagecategory,
        prop.landarea,
        prop.status AS property_status,
        ws_service.connectiontype
    FROM eg_ws_connection ws
    LEFT JOIN eg_sw_connection sw ON ws.property_id = sw.property_id AND sw.tenantid = ws.tenantid
    LEFT JOIN eg_pt_property prop ON ws.property_id = prop.propertyid AND prop.tenantid = ws.tenantid
    LEFT JOIN eg_ws_service ws_service ON ws.id = ws_service.connection_id
    WHERE ws.tenantid = $tenantid )

    SELECT
        (SELECT COUNT(*) FROM connection_data) AS totalwaterconnections,
        (SELECT COUNT(*) FROM eg_sw_connection WHERE tenantid = $tenantid) AS totalsewerageconnections,
        (SELECT COUNT(*) FROM connection_data WHERE water_status = 'Active') AS totalwateractive,
        (SELECT COUNT(*) FROM eg_sw_connection WHERE status = 'Active' AND tenantid = $tenantid) AS totalsewerageactive,
        (SELECT COUNT(*) FROM connection_data WHERE water_status = 'Active' AND property_status IN ('ACTIVE', 'PENDINGWS') AND usagecategory = 'RESIDENTIAL') AS totalactiveresidentialinwater,
        (SELECT COUNT(*) FROM connection_data WHERE sewerage_status = 'Active' AND property_status IN ('ACTIVE', 'PENDINGWS') AND usagecategory = 'RESIDENTIAL') AS totalactiveresidentialinsewerage,
        (SELECT COUNT(*) FROM connection_data WHERE sewerage_status = 'Active' AND property_status IN ('ACTIVE', 'PENDINGWS') AND usagecategory LIKE 'NONRESIDENTIAL%') AS totalactivenonresidentialinsewerage,
        (SELECT COUNT(*) FROM connection_data WHERE water_status = 'Active' AND property_status IN ('ACTIVE', 'PENDINGWS') AND usagecategory LIKE 'NONRESIDENTIAL%') AS totalactivenonresidentialinwater,
        (SELECT COUNT(*) FROM connection_data WHERE connectiontype = 'Metered' AND water_status = 'Active') AS totalmeteredconnections,
        (SELECT COUNT(*) FROM connection_data WHERE landarea BETWEEN 0 AND 125 AND usagecategory = 'RESIDENTIAL' AND water_status = 'Active') AS totalexemptedinwater,
        (SELECT COUNT(*) FROM connection_data WHERE landarea BETWEEN 0 AND 125 AND usagecategory = 'RESIDENTIAL' AND sewerage_status = 'Active') AS totalexemptedinsewerage,
        (SELECT COUNT(*) FROM connection_data WHERE landarea BETWEEN 0 AND 125 AND water_status = 'Active') AS betweenfivemarlawater,
        (SELECT COUNT(*) FROM connection_data WHERE landarea BETWEEN 0 AND 125 AND sewerage_status = 'Active') AS betweenfivemarlasewerage,
        (SELECT COUNT(*) FROM connection_data WHERE landarea BETWEEN 126 AND 250 AND water_status = 'Active') AS betweensixmarlawater,
        (SELECT COUNT(*) FROM connection_data WHERE landarea BETWEEN 126 AND 250 AND sewerage_status = 'Active') AS betweensixandtenmarlasewerage,
        (SELECT COUNT(*) FROM connection_data WHERE landarea >= 251 AND water_status = 'Active') AS morethantenmarlawater,
        (SELECT COUNT(*) FROM connection_data WHERE landarea >= 251 AND sewerage_status = 'Active') AS morethantenmarlasewerage
        
- reportName: WsDefaulterReport
  summary: Ws Defaulter Report
  decryptionPathId: MiscReceiptULB_v2
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: payername
    label: reports.ws.payername
    type: string
    source: ws
    total: false
  - name: mobilenumber
    label: reports.ws.mobilenumber
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: usagecat
    label: reports.ws.usagecat
    type: string
    source: ws
    total: false
  - name: zonename
    label: reports.ws.zonename
    type: string
    source: ws
    total: false
  - name: address
    label: reports.ws.address
    type: string
    source: ws
    total: false
  - name: blockname
    label: reports.ws.blockname
    type: string
    source: ws
    total: false
  - name: total_tax_amount
    label: reports.ws.total_tax_amount
    type: string
    source: ws
    total: true
  searchParams:
  - name: localityArray
    label: reports.pt.zoneList
    type: boundarylist
    source: pt
    isMandatory: true
    searchClause: AND rp.localitycode IN ($localityArray)
  query: |
    WITH demand_summary AS (
      SELECT 
        consumercode, 
        SUM(minimumamountpayable) AS total_tax_amount
      FROM 
        egbs_demand_v1
      WHERE 
        businessservice = 'WS'
        AND tenantid = $tenantid
        AND ispaymentcompleted = 'false'
        AND status = 'ACTIVE'
        AND minimumamountpayable > 0
      GROUP BY 
        consumercode
    ),
    latest_bills AS (
      SELECT lb.consumercode, lb.payername, lb.mobilenumber
      FROM (
        SELECT 
          bill.consumercode,
          bill.payername,
          bill.mobilenumber,
          ROW_NUMBER() OVER (PARTITION BY bill.consumercode ORDER BY bill.createddate DESC) AS rn
        FROM 
          egbs_bill_v1 bill
        WHERE 
          bill.status = 'ACTIVE'
          AND EXISTS (
            SELECT 1 FROM eg_ws_connection ws 
            WHERE ws.connectionno = bill.consumercode
          )
      ) lb
      WHERE lb.rn = 1
    )
    SELECT 
      ws.connectionno AS consumercode, 
      lb.payername AS payername,
      lb.mobilenumber AS mobilenumber,
      rp.propertyid AS propertyid,
      MAX(rp.propertyusagetype) AS usagecat,
      MAX(rp.zonename) AS zonename,
      MAX(rp.address) AS address,
      MAX(rp.blockname) AS blockname,
      ds.total_tax_amount
    FROM 
      eg_ws_connection ws
    JOIN 
      demand_summary ds ON ws.connectionno = ds.consumercode
    JOIN 
      report_properties rp ON ws.property_id = rp.propertyid
    JOIN 
      latest_bills lb ON lb.consumercode = ws.connectionno
    GROUP BY 
      ws.connectionno, lb.payername, lb.mobilenumber, rp.propertyid, ds.total_tax_amount
            
- reportName: SwDefaulterReport
  summary: Sw Defaulter Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: consumercode
    label: reports.ws.consumercode
    type: string
    source: ws
    total: false
  - name: usagecat
    label: reports.ws.usagecat
    type: string
    source: ws
    total: false
  - name: zonename
    label: reports.ws.zonename
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: address
    label: reports.ws.address
    type: string
    source: ws
    total: false
  - name: blockname
    label: reports.ws.blockname
    type: string
    source: ws
    total: false
  - name: total_tax_amount
    label: reports.ws.total_tax_amount
    type: string
    source: ws
    total: true
  query: |
    WITH demand_summary AS (
    SELECT 
        consumercode, 
        SUM(minimumamountpayable) AS total_tax_amount
    FROM 
        egbs_demand_v1
    WHERE 
        businessservice = 'SW'
        AND tenantid =  $tenantid
        AND ispaymentcompleted = 'false'
        AND status = 'ACTIVE'
        AND minimumamountpayable != 0
    GROUP BY 
        consumercode
    )
    SELECT 
        ws.connectionno AS consumercode, 
        addd.propertyusagetype AS usagecat, 
        addd.zonename,
        addd.propertyid,
        addd.address,
        addd.blockname,
        demand_summary.total_tax_amount
    FROM 
        eg_sw_connection AS ws
    JOIN 
        demand_summary ON ws.connectionno = demand_summary.consumercode
    JOIN 
        report_properties AS addd ON ws.property_id = addd.propertyid
  
- reportName: WsandSwDumpReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary: Ws and Sw Dump Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: plotsize
    label: reports.ws.plotsize
    type: string
    source: ws
    total: false
  - name: oldconnectionno
    label: reports.ws.oldconnectionno
    type: string
    source: ws
    total: false
  - name: applicationno
    label: reports.ws.applicationno
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: applicationstatus
    label: reports.ws.applicationstatus
    type: string
    source: ws
    total: false
  - name: ownername
    label: reports.ws.ownername
    type: string
    source: ws
    total: false
  - name: guardianname
    label: reports.ws.guardianname
    type: string
    source: ws
    total: false
  - name: address
    label: reports.ws.address
    type: string
    source: ws
    total: false
  - name: connectionstatus
    label: reports.ws.connectionstatus
    type: string
    source: ws
    total: false
  - name: connectiontype
    label: reports.ws.connectiontype
    type: string
    source: ws
    total: false
  - name: usage
    label: reports.ws.usage
    type: string
    source: ws
    total: false
  - name: subusage
    label: reports.ws.subusage
    type: string
    source: ws
    total: false
  - name: connectionexecutiondate
    label: reports.ws.connectionexecutiondate
    type: string
    source: ws
    total: false
  - name: connectionholdername
    label: reports.ws.connectionholdername
    type: string
    source: ws
    total: false        
  query: |
    with OwnerInfo AS (  select split_part(string_agg(userid, ','), ',', 1) AS owneruserid,
    propertyid    from eg_pt_owner    where tenantid = $tenantid AND status = 'ACTIVE'    
    group by propertyid)select 
    wsconnection.connectionno as connectionno,
    pt.propertyid as propertyid,
    pt.plotsize AS plotsize,
    oldconnectionno,
    applicationno,
    wsconnection.applicationstatus as applicationstatus,
    wsconnection.status as connectionstatus,
    ws.connectiontype as connectiontype,
    ws.connectionexecutiondate as connectionexecutiondate,
    pt.propertystatus as propertystatus,
    pt.propertyusagetype as usage,
    wsconnection.additionaldetails->>'waterSubUsageType' as subusage,
    users.name AS connectionholdername, 
    userowner.name AS ownername,
    userowner.guardian AS guardianname,
    concat(pt.address, ' ', pt.localityname) AS address from 
    eg_ws_connection wsconnection inner JOIN  eg_ws_service ws  ON  wsconnection.id = ws.connection_id inner JOIN report_properties pt ON pt.propertyid = wsconnection.property_id left OUTER JOIN eg_ws_connectionholder ch ON ch.connectionid = wsconnection.id left OUTER JOIN eg_user users ON ch.userid = users.uuid inner JOIN OwnerInfo oi ON oi.propertyid = pt.pt_uuid left OUTER JOIN eg_user userowner ON oi.owneruserid = userowner.uuid where wsconnection.tenantid =$tenantid and wsconnection.connectionno is not null and wsconnection.status = 'Active'
- reportName: SwDumpReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary: Sw Dump Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: plotsize
    label: reports.ws.plotsize
    type: string
    source: ws
    total: false
  - name: oldconnectionno
    label: reports.ws.oldconnectionno
    type: string
    source: ws
    total: false
  - name: applicationno
    label: reports.ws.applicationno
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: ws
    total: false
  - name: applicationstatus
    label: reports.ws.applicationstatus
    type: string
    source: ws
    total: false
  - name: ownername
    label: reports.ws.ownername
    type: string
    source: ws
    total: false
  - name: guardianname
    label: reports.ws.guardianname
    type: string
    source: ws
    total: false
  - name: address
    label: reports.ws.address
    type: string
    source: ws
    total: false
  - name: connectionstatus
    label: reports.ws.connectionstatus
    type: string
    source: ws
    total: false
  - name: connectiontype
    label: reports.ws.connectiontype
    type: string
    source: ws
    total: false
  - name: usage
    label: reports.ws.usage
    type: string
    source: ws
    total: false
  - name: subusage
    label: reports.ws.subusage
    type: string
    source: ws
    total: false
  - name: connectionexecutiondate
    label: reports.ws.connectionexecutiondate
    type: string
    source: ws
    total: false
  - name: connectionholdername
    label: reports.ws.connectionholdername
    type: string
    source: ws
    total: false        
  query: |
    with OwnerInfo AS (  select split_part(string_agg(userid, ','), ',', 1) AS owneruserid,
    propertyid    from eg_pt_owner    where tenantid =$tenantid AND status = 'ACTIVE'    
    group by propertyid)select 
    swconnection.connectionno as connectionno,
    pt.propertyid as propertyid,
    pt.plotsize AS plotsize,
    oldconnectionno,
    applicationno,
    swconnection.applicationstatus as applicationstatus,
    swconnection.status as connectionstatus,
    sw.connectiontype as connectiontype,
    sw.connectionexecutiondate as connectionexecutiondate,
    pt.propertystatus as propertystatus,
    pt.propertyusagetype as usage,
    swconnection.additionaldetails->>'waterSubUsageType' as subusage,
    users.name AS connectionholdername, 
    userowner.name AS ownername,
    userowner.guardian AS guardianname,
    concat(pt.address, ' ', pt.localityname) AS address from 
    eg_sw_connection swconnection inner JOIN  eg_sw_service sw  ON  swconnection.id = sw.connection_id inner JOIN report_properties pt ON pt.propertyid = swconnection.property_id left OUTER JOIN eg_sw_connectionholder ch ON ch.connectionid = swconnection.id left OUTER JOIN eg_user users ON ch.userid = users.uuid inner JOIN OwnerInfo oi ON oi.propertyid = pt.pt_uuid left OUTER JOIN eg_user userowner ON oi.owneruserid = userowner.uuid where swconnection.tenantid =$tenantid and swconnection.connectionno is not null and swconnection.status = 'Active'
- reportName: SwDumpReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary: Sw Dump Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: connectionno
    label: reports.sw.connectionno
    type: string
    source: ws
    total: false
  - name: plotsize
    label: reports.sw.plotsize
    type: string
    source: ws
    total: false
  - name: oldconnectionno
    label: reports.sw.oldconnectionno
    type: string
    source: ws
    total: false
  - name: applicationno
    label: reports.sw.applicationno
    type: string
    source: ws
    total: false
  - name: propertyid
    label: reports.sw.propertyid
    type: string
    source: ws
    total: false
  - name: applicationstatus
    label: reports.sw.applicationstatus
    type: string
    source: ws
    total: false
  - name: ownername
    label: reports.sw.ownername
    type: string
    source: ws
    total: false
  - name: guardianname
    label: reports.sw.guardianname
    type: string
    source: ws
    total: false
  - name: address
    label: reports.sw.address
    type: string
    source: ws
    total: false
  - name: connectionstatus
    label: reports.sw.connectionstatus
    type: string
    source: ws
    total: false
  - name: usage
    label: reports.sw.usage
    type: string
    source: ws
    total: false
  - name: subusage
    label: reports.sw.subusage
    type: string
    source: ws
    total: false
  - name: connectionexecutiondate
    label: reports.sw.connectionexecutiondate
    type: string
    source: ws
    total: false
  - name: connectionholdername
    label: reports.sw.connectionholdername
    type: string
    source: ws
    total: false        
  query: |
    with OwnerInfo AS (  select split_part(string_agg(userid, ','), ',', 1) AS owneruserid,
    propertyid    from eg_pt_owner    where tenantid =$tenantid AND status = 'ACTIVE'    
    group by propertyid)select 
    swconnection.connectionno as connectionno,
    pt.propertyid as propertyid,
    pt.plotsize AS plotsize,
    oldconnectionno,
    applicationno,
    swconnection.applicationstatus as applicationstatus,
    swconnection.status as connectionstatus,
    sw.connectionexecutiondate as connectionexecutiondate,
    pt.propertystatus as propertystatus,
    pt.propertyusagetype as usage,
    swconnection.additionaldetails->>'waterSubUsageType' as subusage,
    users.name AS connectionholdername, 
    userowner.name AS ownername,
    userowner.guardian AS guardianname,
    concat(pt.address, ' ', pt.localityname) AS address from 
    eg_sw_connection swconnection inner JOIN  eg_sw_service sw  ON  swconnection.id = sw.connection_id inner JOIN report_properties pt ON pt.propertyid = swconnection.property_id left OUTER JOIN eg_sw_connectionholder ch ON ch.connectionid = swconnection.id left OUTER JOIN eg_user users ON ch.userid = users.uuid inner JOIN OwnerInfo oi ON oi.propertyid = pt.pt_uuid left OUTER JOIN eg_user userowner ON oi.owneruserid = userowner.uuid where swconnection.tenantid =$tenantid and swconnection.connectionno is not null and swconnection.status = 'Active'

- reportName: MeterReadingReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary: Meter Reading Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
    
  - name: billingperiod
    label: reports.ws.billingperiod
    type: string
    source: ws
    total: false

  - name: propertyid
    label: reports.ws.propertyid
    type: string
    source: pt
    total: false

  - name: currentReading
    label: reports.ws.currentreading
    type: string
    source: ws
    total: false

  - name: lastReading
    label: reports.ws.lastreading
    type: string
    source: ws
    total: false

  - name: meterstatus
    label: reports.ws.meterstatus
    type: string
    source: ws
    total: false

  - name: address
    label: reports.ws.address
    type: string
    source: pt
    total: false

  - name: blockname
    label: reports.ws.blockname
    type: string
    source: pt
    total: false

  - name: zonename
    label: reports.ws.zonename
    type: string
    source: pt
    total: false

  - name: zonecode
    label: reports.ws.zonecode
    type: string
    source: pt
    total: false

  - name: propertyusagetype
    label: reports.ws.propertyusagetype
    type: string
    source: pt
    total: false

  - name: propertytype
    label: reports.ws.propertytype
    type: string
    source: pt
    total: false
  searchParams:
  - name: localityArray
    label: reports.pt.zoneList
    type: boundarylist
    source: pt
    isMandatory: false
    searchClause: AND pt.localitycode IN ($localityArray)
  query: |
    SELECT 
    conn.connectionno, 
    MAX(mt.billingperiod) AS billingperiod,  
    MAX(pt.propertyid) AS propertyid,
    MAX(mt.currentreading) AS currentReading,
    MAX(mt.lastreading) AS lastReading,
    MAX(mt.meterstatus) AS meterstatus,
    MAX(pt.address) AS address, 
    MAX(pt.blockname) AS blockname,  
    MAX(pt.zonename) AS zonename, 
    MAX(pt.zonecode) AS zonecode, 
    MAX(pt.propertyusagetype) AS propertyusagetype, 
    MAX(pt.propertytype) AS propertytype    FROM  eg_ws_meterreading AS mt
    INNER JOIN 
        eg_ws_connection AS conn ON mt.connectionno = conn.connectionno
    INNER JOIN 
        report_properties AS pt ON pt.propertyid = conn.property_id
    WHERE 
        conn.tenantid = $tenantid
    AND 
        mt.currentreadingdate = (
            SELECT MAX(currentreadingdate)
            FROM eg_ws_meterreading
            WHERE connectionno = mt.connectionno
        )
  groupby: GROUP BY   conn.connectionno

    
    
- reportName: BillSchedulerReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary: Bill Scheduler Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: locality
    label: reports.ws.locality
    type: string
    source: ws
    total: false
  - name: status
    label: reports.ws.status
    type: string
    source: ws
    total: false
  - name: service_type
    label: reports.ws.service_type
    type: string
    source: ws
    total: false
  - name: billingcyclestartdate
    label: reports.ws.billingcyclestartdate
    type: string
    source: ws
    total: false
  - name: billingcycleenddate
    label: reports.ws.billingcycleenddate
    type: string
    source: ws
    total: false
  - name: createddate
    label: reports.ws.createddate
    type: string
    source: ws
    total: false
  query: |
    WITH LatestWaterBill AS (SELECT 'Water' AS 
    service_type,
    s1.locality,
    MAX(s1.billingcyclestartdate) AS billingcyclestartdate,
    MAX(s1.billingcycleenddate) AS billingcycleenddate,
    MAX(s1.createdtime) AS createddate
    FROM
    eg_ws_scheduler s1
    WHERE s1.tenantid = $tenantid 
    GROUP BY
    s1.locality
    ),
    LatestSewerageBill AS (SELECT
    'Sewerage' AS service_type,
    s2.locality,
    MAX(s2.billingcyclestartdate) AS billingcyclestartdate,
    MAX(s2.billingcycleenddate) AS billingcycleenddate,
    MAX(s2.createdtime) AS createddate
    FROM eg_sw_scheduler s2 WHERE s2.tenantid = $tenantid 
    GROUP BY
    s2.locality),
    CombinedLatestBill AS (
    SELECT * FROM LatestWaterBill
    UNION ALL
    SELECT * FROM LatestSewerageBill
    )
    SELECT
    s1.locality,
    s1.status,
    b1.service_type,
    b1.billingcyclestartdate,
    b1.billingcycleenddate,
    b1.createddate
    FROM
    eg_ws_scheduler s1
    INNER JOIN CombinedLatestBill b1 ON s1.locality = b1.locality AND s1.billingcyclestartdate = b1.billingcyclestartdate AND s1.billingcycleenddate = b1.billingcycleenddate
    AND s1.createdtime = b1.createddate WHERE s1.tenantid = $tenantid  AND b1.service_type = 'Water'
    UNION ALL 
    SELECT
    s2.locality,
    s2.status,
    b1.service_type,
    b1.billingcyclestartdate,
    b1.billingcycleenddate,
    b1.createddate
    FROM eg_sw_scheduler s2 INNER JOIN CombinedLatestBill b1 ON s2.locality = b1.locality AND s2.billingcyclestartdate = b1.billingcyclestartdate 
    AND s2.billingcycleenddate = b1.billingcycleenddate AND s2.createdtime = b1.createddate WHERE s2.tenantid = $tenantid  AND b1.service_type = 'Sewerage'
    ORDER BY locality, service_type;

- reportName:  SWDemandDetailReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary:  SW Demand Detail Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: finyear
    label: reports.ws.finyear
    type: string
    source: ws
    total: false
  - name: status
    label: reports.ws.status
    type: string
    source: ws
    total: false
  - name: demandupdateddate
    label: reports.ws.demandupdateddate
    type: string
    source: ws
    total: false
  - name: taxhead
    label: reports.ws.taxhead
    type: string
    source: ws
    total: false
  - name: taxamt
    label: reports.ws.taxamt
    type: string
    source: ws
    total: false
  - name: taxamt
    label: reports.ws.taxamt
    type: string
    source: ws
    total: false
  - name: taxcoll
    label: reports.ws.taxcoll
    type: string
    source: ws
    total: false
  - name: balance
    label: reports.ws.balance
    type: string
    source: ws
    total: false
  - name: ispaymentcompleted
    label: reports.ws.ispaymentcompleted
    type: string
    source: ws
    total: false
  query: |
    SELECT 
    sw.connectionno,
    COALESCE(to_char((to_timestamp(d.taxperiodfrom/1000) at time zone 'Asia/Kolkata'),'YYYY-MM') || '-' || to_char((to_timestamp(d.taxperiodto/1000) at time zone 'Asia/Kolkata'),'YYYY-MM'), 'N/A') AS Finyear,
    d.status,
    to_timestamp(dd.createdtime/1000) at time zone 'Asia/Kolkata' AS DemandUpdateddate,
    dd.taxheadcode AS taxHead,
    dd.taxamount AS taxamt,
    dd.collectionamount AS taxcoll,
    (dd.taxamount - dd.collectionamount) AS balance,
    d.ispaymentcompleted
    FROM eg_sw_connection sw LEFT JOIN egbs_demand_v1 d ON sw.connectionno = d.consumercode AND d.tenantid = $tenantid AND d.businessservice = 'SW' AND d.taxperiodfrom >= '1704000082000' AND d.status != 'CANCELLED'
    LEFT JOIN egbs_demanddetail_v1 dd ON dd.demandid = d.id WHERE sw.tenantid = $tenantid 
    ORDER BY sw.connectionno;


- reportName:  CollectionSummaryReport
  decryptionPathId: ULBPTDataDumpReport_V2
  summary:  Collection Summary Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: usage
    label: reports.ws.usage
    type: string
    source: ws
    total: false
  - name: service
    label: reports.ws.service
    type: string
    source: ws
    total: false
  - name: noofreceipts
    label: reports.ws.noofreceipts
    type: string
    source: ws
    total: false
  - name: collected
    label: reports.ws.collected
    type: string
    source: ws
    total: false
  - name: paymentmode
    label: reports.ws.paymentmode
    type: string
    source: ws
    total: false
  query: |
    WITH connection_data AS (SELECT 
    wc.connectionno,
    pt.propertyid,
    CASE WHEN pt.usagecategory LIKE 'NONRESIDENTIAL%' THEN 'NONRESIDENTIAL' ELSE pt.usagecategory END AS usage 
    FROM eg_ws_connection wc
    INNER JOIN eg_pt_property pt ON wc.property_id = pt.propertyid 
    AND wc.tenantid = pt.tenantid WHERE wc.tenantid =$tenantid  AND wc.status = 'Active'
    UNION SELECT 
    sc.connectionno,
    pt.propertyid,
    CASE WHEN pt.usagecategory LIKE 'NONRESIDENTIAL%' THEN 'NONRESIDENTIAL'
    ELSE pt.usagecategory END AS usage FROM eg_sw_connection sc
    INNER JOIN eg_pt_property pt ON sc.property_id = pt.propertyid AND sc.tenantid = pt.tenantid WHERE sc.tenantid =$tenantid
    AND sc.status = 'Active')SELECT 
    cd.usage as usage,
    bill.businessservice AS service,
    COUNT(receiptnumber) AS NoOfReceipts,
    SUM(amountpaid) AS collected,
    payment.paymentmode FROM egcl_paymentdetail pd
    INNER JOIN egcl_bill AS bill ON bill.id = pd.billid
    INNER JOIN egcl_payment AS payment ON payment.id = pd.paymentid
    INNER JOIN connection_data AS cd ON bill.consumercode = cd.connectionno
    AND payment.paymentstatus != 'CANCELLED' WHERE payment.tenantid =$tenantid AND pd.businessservice IN ('WS','SW')
    AND bill.status = 'ACTIVE' AND pd.receiptdate > '1711929599000'
    GROUP BY cd.usage,bill.businessservice,payment.paymentmode
    ORDER BY cd.usage,bill.businessservice,payment.paymentmode
    
- reportName:  QaurterlyReport
  summary:  Qaurter Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: property_id
    label: reports.ws.property_id
    type: string
    source: ws
    total: false
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: connection_status
    label: reports.ws.connection_status
    type: string
    source: ws
    total: false
  - name: usagecategory
    label: reports.ws.usagecategory
    type: string
    source: ws
    total: false
  - name: plotsize
    label: reports.ws.plotsize
    type: string
    source: ws
    total: false
  - name: demandid
    label: reports.ws.demandid
    type: string
    source: ws
    total: false
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  - name: taxperiodfrom
    label: reports.ws.taxperiodfrom
    type: string
    source: ws
    total: false
  - name: taxperiodto
    label: reports.ws.taxperiodto
    type: string
    source: ws
    total: false
  - name: demand_tenantid
    label: reports.ws.demand_tenantid
    type: string
    source: ws
    total: false
  - name: minimumamountpayable
    label: reports.ws.minimumamountpayable
    type: string
    source: ws
    total: false
  - name: demand_status
    label: reports.ws.demand_status
    type: string
    source: ws
    total: false
  - name: ispaymentcompleted
    label: reports.ws.ispaymentcompleted
    type: string
    source: ws
    total: false
  searchParams:
  - name: quarter
    label: Quarter
    type: singlevaluelist
    pattern: 'list://1704067200000:Q1_2024,1711929600000:Q2_2024,1719792000000:Q3_2024'
    source: ws
    isMandatory: true
    searchClause: AND 1=1
  query: |
    SELECT 
      w.property_id,
      w.connectionno,
      w.status AS connection_status,
      p.usagecategory,
      p.landarea  As plotsize,
      d.id  AS demandid , 
      d.businessservice,
      d.taxperiodfrom,
      d.taxperiodto,
      d.tenantid AS demand_tenantid,
      d.minimumamountpayable,
      d.status AS demand_status,
      d.ispaymentcompleted
    FROM eg_ws_connection w
    LEFT JOIN eg_pt_property p ON w.property_id = p.propertyid
    LEFT JOIN  egbs_demand_v1 d ON (d.consumercode = w.connectionno AND d.businessservice = 'WS' AND d.taxperiodfrom = $quarter AND d.tenantid = $tenantid)
    WHERE 
      w.tenantid = $tenantid
      AND w.status = 'Active'
      AND w.connectionno IS NOT NULL
      AND (d.status IS NULL OR d.status != 'CANCELLED')

- reportName: SWQaurterlyReport
  summary:  SW Qaurter Report
  version: 1.0.0
  moduleName: rainmaker-ws
  additionalConfig:
    print:
      pdfPageSize: A1
  sourceColumns:
  - name: property_id
    label: reports.ws.property_id
    type: string
    source: ws
    total: false
  - name: connectionno
    label: reports.ws.connectionno
    type: string
    source: ws
    total: false
  - name: connection_status
    label: reports.ws.connection_status
    type: string
    source: ws
    total: false
  - name: usagecategory
    label: reports.ws.usagecategory
    type: string
    source: ws
    total: false
  - name: plotsize
    label: reports.ws.plotsize
    type: string
    source: ws
    total: false
  - name: demandid
    label: reports.ws.demandid
    type: string
    source: ws
    total: false
  - name: businessservice
    label: reports.ws.businessservice
    type: string
    source: ws
    total: false
  - name: taxperiodfrom
    label: reports.ws.taxperiodfrom
    type: string
    source: ws
    total: false
  - name: taxperiodto
    label: reports.ws.taxperiodto
    type: string
    source: ws
    total: false
  - name: demand_tenantid
    label: reports.ws.demand_tenantid
    type: string
    source: ws
    total: false
  - name: minimumamountpayable
    label: reports.ws.minimumamountpayable
    type: string
    source: ws
    total: false
  - name: demand_status
    label: reports.ws.demand_status
    type: string
    source: ws
    total: false
  - name: ispaymentcompleted
    label: reports.ws.ispaymentcompleted
    type: string
    source: ws
    total: false
  searchParams:
  - name: quarter
    label: Quarter
    type: singlevaluelist
    pattern: 'list://1704067200000:Q1_2024,1711929600000:Q2_2024,1719792000000:Q3_2024'
    source: ws
    isMandatory: true
    searchClause: AND 1=1
  query: |
    SELECT 
      w.property_id,
      w.connectionno,
      w.status AS connection_status,
      p.usagecategory,
      p.landarea  As plotsize,
      d.id  AS demandid , 
      d.businessservice,
      d.taxperiodfrom,
      d.taxperiodto,
      d.tenantid AS demand_tenantid,
      d.minimumamountpayable,
      d.status AS demand_status,
      d.ispaymentcompleted
    FROM eg_sw_connection w
    LEFT JOIN eg_pt_property p ON w.property_id = p.propertyid
    LEFT JOIN  egbs_demand_v1 d ON (d.consumercode = w.connectionno AND d.businessservice = 'SW' AND d.taxperiodfrom = $quarter AND d.tenantid = $tenantid)
    WHERE 
      w.tenantid = $tenantid
      AND w.status = 'Active'
      AND w.connectionno IS NOT NULL
      AND (d.status IS NULL OR d.status != 'CANCELLED')
